Compiling kRPC
==============

kRPC uses the `Bazel build system <http://bazel.io>`_.

Install Dependencies
--------------------

Bazel automatically downloads most of the required dependencies to build
kRPC. However the following will need to be installed on your system:

 * `Mono C# compiler and runtime <http://www.mono-project.com/download/>`_
 * Python, including virtualenv and pip
 * pdflatex for building the documentation
 * RSVG for converting SVGs to PNGs
 * libxml, libxslt and Python headers, for building the Java documentation

To install the latest C# compiler and runtime on Ubuntu, follow the instructions
on `Mono's website
<http://www.mono-project.com/docs/getting-started/install/linux/#debian-ubuntu-and-derivatives>`_
The other dependencies can be installed via apt:

.. code-block:: bash

   $ sudo apt-get install mono-complete \
     python-virtualenv python-pip \
     texlive-latex-base texlive-latex-recommended \
     texlive-fonts-recommended texlive-latex-extra \
     librsvg2-bin libxml2-dev libxslt1-dev python-dev

Setup your Environment
----------------------

Before building kRPC you need to make ``lib/ksp`` point to a directory
containing Kerbal Space Program. For example on Linux, if your KSP directory is
at ``/path/to/ksp`` and your kRPC source tree at ``/path/to/krpc`` you can
create a symlink using ``ln -s /path/to/ksp /path/to/krpc/lib/ksp``

You may also need to modify the symlink at ``lib/mono-4.5`` to point to the
correct location of your Mono installation.

Building using Bazel
--------------------

To build the kRPC release archive, run ``bazel build //:krpc``. The resulting
archive containing the GameData directory, client libraries etc will be created
at ``bazel-out/krpc-<version>.zip``.

The build scripts also define specific other targets that may be useful. Build
them using ``bazel build <target>``:

* ``//server`` builds the server plugin and associated files
* Targets for building individual clients:

  * ``//client/csharp``
  * ``//client/cpp``
  * ``//client/java``
  * ``//client/lua``
  * ``//client/python``

* Targets for building individual services:

  * ``//service/SpaceCenter``
  * ``//service/InfernalRobotics``
  * ``//service/KerbalAlarmClock``
  * ``//service/RemoteTech``

* Targets for building protobuf definitions for individual languages:

  * ``//protobuf/csharp``
  * ``//protobuf/cpp``
  * ``//protobuf/java``
  * ``//protobuf/lua``
  * ``//protobuf/python``

* ``//doc:html`` builds the HTML documentation
* ``//doc:pdf`` builds the PDF documentation

There are also several convenience scripts:

* ``tools/serve-docs.sh`` -- build the documentation and serve it from
  ``http://localhost:8080``
* ``tools/install.sh`` -- build the plugin and the testing tools, and install
  them into the GameData directory of the copy of KSP found at ``lib/ksp``.

Building the C# projects using an IDE
-------------------------------------

A C# solution file (``kRPC.sln``) is provided in the root of the project for use
with MonoDevelop or a similar C# IDE.

Some of the C# source files it references are generated by the Bazel build
scripts. You need to run ``bazel build //:csproj`` to generate these files
before the solution can be built.

Alternatively, if you are unable to run Bazel to build these files, you can
:github-download-zip:`download them from GitHub<krpc-genfiles>`. Simply extract
this archive over your copy of the source and you are good to go.

Running the Tests
^^^^^^^^^^^^^^^^^

kRPC contains a suite of tests for the server plugin, services, client
libraries and others.

The tests, which do not require KSP to be running, can be executed using:
``bazel test //:test``. Bazel will automatically download most of the required
dependencies to run the tests, however you will also need to install Lua and
LuaRocks on your system. On Ubuntu, these can be installed using: ``sudo apt-get
install lua5.1 luarocks``

.. note::

   You need to install luarocks version 2.2.0 or higher. On older versions of
   Ubuntu, the version in the apt repositories is too old and luarocks will need
   to be installed via other means.

kRPC also includes a suite of tests that require KSP to be running. First run
``tools/install.sh`` to build kRPC and a testing tools DLL, and install them
into the GameData directory of the copy of KSP found at ``lib/ksp``. Then run
KSP, load a save game and start the server (with automatically accept client
connected enabled). Then install the krpc python client, and run the scripts
found in ``service/SpaceCenter/test``. These tests will automatically load a
save game called ``test``, launch a vessel and run various tests on it.
