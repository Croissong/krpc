using System;
using KRPC.Service.Attributes;
using KRPC.SpaceCenter.ExtensionMethods;
using KRPC.Utils;

namespace KRPC.SpaceCenter.Services.Parts
{
    /// <summary>
    /// Obtained by calling <see cref="Part.SolarPanel"/>.
    /// </summary>
    [KRPCClass (Service = "SpaceCenter")]
    public sealed class SolarPanel : Equatable<SolarPanel>
    {
        readonly Part part;
        readonly ModuleDeployableSolarPanel panel;

        internal static bool Is (Part part)
        {
            return part.InternalPart.HasModule<ModuleDeployableSolarPanel> ();
        }

        internal SolarPanel (Part part)
        {
            this.part = part;
            panel = part.InternalPart.Module<ModuleDeployableSolarPanel> ();
            if (panel == null)
                throw new ArgumentException ("Part is not a solar panel");
        }

        /// <summary>
        /// Check if solar panels are equal.
        /// </summary>
        public override bool Equals (SolarPanel obj)
        {
            return part == obj.part && panel == obj.panel;
        }

        /// <summary>
        /// Hash the solar panel.
        /// </summary>
        public override int GetHashCode ()
        {
            return part.GetHashCode () ^ panel.GetHashCode ();
        }

        /// <summary>
        /// The part object for this solar panel.
        /// </summary>
        [KRPCProperty]
        public Part Part {
            get { return part; }
        }

        /// <summary>
        /// Whether the solar panel is extended.
        /// </summary>
        [KRPCProperty]
        public bool Deployed {
            get {
                return panel.panelState == ModuleDeployableSolarPanel.panelStates.EXTENDED || panel.panelState == ModuleDeployableSolarPanel.panelStates.EXTENDING;
            }
            set {
                if (value)
                    panel.Extend ();
                else
                    panel.Retract ();
            }
        }

        /// <summary>
        /// The current state of the solar panel.
        /// </summary>
        [KRPCProperty]
        public SolarPanelState State {
            get {
                switch (panel.panelState) {
                case ModuleDeployableSolarPanel.panelStates.EXTENDED:
                    return SolarPanelState.Extended;
                case ModuleDeployableSolarPanel.panelStates.RETRACTED:
                    return SolarPanelState.Retracted;
                case ModuleDeployableSolarPanel.panelStates.EXTENDING:
                    return SolarPanelState.Extending;
                case ModuleDeployableSolarPanel.panelStates.RETRACTING:
                    return SolarPanelState.Retracting;
                case ModuleDeployableSolarPanel.panelStates.BROKEN:
                    return SolarPanelState.Broken;
                default:
                    throw new ArgumentException ("Unsupported solar panel state");
                }
            }
        }

        /// <summary>
        /// The current amount of energy being generated by the solar panel, in
        /// units of charge per second.
        /// </summary>
        [KRPCProperty]
        public float EnergyFlow {
            get { return panel.flowRate; }
        }

        /// <summary>
        /// The current amount of sunlight that is incident on the solar panel,
        /// as a percentage. A value between 0 and 1.
        /// </summary>
        [KRPCProperty]
        public float SunExposure {
            get { return panel.sunAOA; }
        }
    }
}
